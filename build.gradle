plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.benson'
version = '0.0.1-SNAPSHOT'

configurations {
    jaxb
}

bootJar {
    archiveBaseName = 'gs-producing-web-service'
    archiveVersion = '0.1.0'
}

java {
    sourceCompatibility = '17'
    sourceSets.main.java.srcDirs += "$buildDir/generated-sources/jaxb"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'wsdl4j:wsdl4j'
    compileOnly 'org.projectlombok:lombok'
    jaxb("org.glassfish.jaxb:jaxb-xjc")
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.register('genJaxb') {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.schema = "src/main/resources/countries.xsd"

    inputs.file schema
    outputs.dir sourcesDir

    delete(sourcesDir)

    doLast() {
        project.ant {
            taskdef name: "xjc",
                    classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-XautoNameResolution")
                produces(dir: sourcesDir, includes: "**/*.java")
            }
        }
    }
}

compileJava.dependsOn(genJaxb)
tasks.named('test') {
    useJUnitPlatform()
}